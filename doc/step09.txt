=====================================================================
=                  Step 9: Adding dependencies                      =
=====================================================================

Chances are that the generated code will at some stage depend on external
libraries or some custom code such as base classes. If the code generation
is to be used only in a single project, then it can be sufficient to just
let that project pull in the dependencies. In other cases it is better to
manage the dependencies as part of the generator project, though.

The approach we will take is to add another module into the Maven project
that will manage the external dependencies and also offer a convenient
place to put the internal ones (base classes, etc.). Any project that
uses the generator plugin will then also have to depend on this module,
but nothing else. The versioning is kept consistent by sharing the same
parent project.

The new base module just adds a single dependency to the JPA annotation
API. The generator uses this to flag all classes as entities for the
purpose of JPA. Our test module just depends on the base module and picks
up the required dependencies that way. Any production project would just
do the same, all dependencies of the generated code can then be managed
easily in sync with the plugin itself.

Of course this code base is not sufficient for a full ORM layer. To
make this work we would have to also control the special cases such
as many-to-many relationships, date and time mappings etc. This would
require expanding our input model (the XSD), which exceeds the scope of
this tutorial. But all the basic infrastructure for doing this is in
place now.
